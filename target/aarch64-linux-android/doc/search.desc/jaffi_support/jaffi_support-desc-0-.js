searchState.loadedDescShard("jaffi_support", 0, "Convert from a JValue (return type in Java) into the Rust …\nConvert from Rust type into JValue\nBoolean\nByte\nChar\nDouble\nFloat\nInt\nLong\nShort\nVoid\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nArrays\nArrays\nA read-only wrapper around the java array\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new array from containing the data from <code>from</code>\nA type that represents a known Exception type from Java.\nTests the exception against this type to see if it’s a …\nTests the exception against this type to see if it’s a …\nTests the exception against this type to see if it’s a …\nCatches and potential panics, and then converts them to a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis panic hook can add a bit more information than the …\nThrow a new exception.\nThrow a new exception.\nThrow a new exception.")