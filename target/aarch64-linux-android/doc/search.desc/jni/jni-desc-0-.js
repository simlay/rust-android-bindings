searchState.loadedDescShard("jni", 0, "Safe JNI Bindings in Rust\nA RAII implementation of scoped guard which detaches the …\nThe capacity of local frames, allocated for attached …\nThread attachment manager. It allows to execute closures …\nFFI-compatible JNIEnv struct. You can safely use this as …\nJNI Version\nThe Java VM, providing Invocation API support.\nGuard for a lock on a java object. This gets returned from …\nNative method descriptor.\nAllocates a new object from a class descriptor without …\nAttaches the current thread to the Java VM. The returned …\nAttaches the current thread to the Java VM as a <em>daemon</em>. …\nAttaches the current thread to the JVM. Calling this for a …\nCreates a new auto-deleted local reference.\nCreate a new java byte array from a rust byte slice.\nCalls an object method safely. This comes with a number of …\nCall an object method in an unsafe manner. This does …\nCalls a static method safely. This comes with a number of …\nCall a static method in an unsafe manner. This does …\nConverts a java byte array to a rust vector of bytes.\nLoad a class from a buffer of raw class data. The name of …\nLoad a class from a buffer of raw class data. The name of …\nDeletes the local reference.\nDescriptors for classes and method IDs.\nEnsures that at least a given number of local references …\nErrors. Do you really need more explanation?\nCheck to see if an exception is being thrown. This only …\nClear an exception in the process of being thrown. If this …\nPrint exception information to the console.\nCheck whether or not an exception is currently in the …\nAbort the JVM with an error message.\nLook up a class by name.\nPointer to native function with signature …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a JNIEnv from a raw pointer.\nCreate a JavaVM from a raw pointer.\nReturn an AutoArray of the given Java array.\nGet the length of a java array\nSee also <code>get_array_elements</code>\nCopy elements of the java boolean array from the <code>start</code> …\nSee also <code>get_array_elements</code>\nCopy elements of the java byte array from the <code>start</code> index …\nSee also <code>get_array_elements</code>\nCopy elements of the java char array from the <code>start</code> index …\nReturns the starting address of the memory of the direct …\nReturns the capacity (length) of the direct …\nSee also <code>get_array_elements</code>\nCopy elements of the java double array from the <code>start</code> …\nGet the <code>JNIEnv</code> associated with the current thread, or …\nGet a field. Requires an object class lookup and a field …\nLook up the field ID for a class/name/type combination.\nGet a field without checking the provided type against the …\nSee also <code>get_array_elements</code>\nCopy elements of the java float array from the <code>start</code> index …\nSee also <code>get_array_elements</code>\nCopy elements of the java int array from the <code>start</code> index …\nReturns the Java VM interface.\nReturns underlying <code>sys::JavaVM</code> interface.\nCast a JObject to a <code>JList</code>. This won’t throw exceptions …\nSee also <code>get_array_elements</code>\nCopy elements of the java long array from the <code>start</code> index …\nCast a JObject to a JMap. This won’t throw exceptions or …\nLook up a method by class descriptor, name, and signature.\nReturns underlying <code>sys::JNIEnv</code> interface.\nReturns an element of the <code>jobjectArray</code> array.\nGet the class for an object.\nReturn an AutoPrimitiveArray of the given Java primitive …\nGets a lock on a Rust value that’s been given to a Java …\nSee also <code>get_array_elements</code>\nCopy elements of the java short array from the <code>start</code> index …\nGet a static field. Requires a class lookup and a field id …\nLook up the static field ID for a class/name/type …\nGet a static field without checking the provided type …\nLook up a static method by class descriptor, name, and …\nGet a JavaStr from a JString. This allows conversions from …\nGet a pointer to the character array beneath a JString.\nReturns the superclass for a particular class OR …\nGet the java version that we’re being executed from.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTests whether class1 is assignable from class2.\nReturns true if the object reference can be cast to the …\nReturns true if ref1 and ref2 refer to the same Java …\nLock a Java object. The MonitorGuard that this returns is …\nName of method.\nCreates new Executor with specified JVM.\nCreate a new java boolean array of supplied length.\nCreate a new java byte array of supplied length.\nCreate a new java char array of supplied length.\nCreate a new instance of a direct java.nio.ByteBuffer\nCreate a new java double array of supplied length.\nCreate a new java float array of supplied length.\nTurns an object into a global ref. This has the benefit of …\nCreate a new java int array of supplied length.\nCreate a new local reference to an object.\nCreate a new java long array of supplied length.\nCreate a new object using a constructor. This is done …\nConstruct a new array holding objects in class …\nCreate a new object using a constructor. Arguments aren’…\nCreate a new java short array of supplied length.\nCreate a new java string object from a rust string. This …\nWrappers for object pointers returned from the JVM.\nPops off the current local reference frame, frees all the …\nCreates a new local reference frame, in which at least a …\nBind function pointers to native methods of class …\nUnpin the array returned by <code>get_string_utf_chars</code>.\nCopy the contents of the <code>buf</code> slice to the java boolean …\nCopy the contents of the <code>buf</code> slice to the java byte array …\nCopy the contents of the <code>buf</code> slice to the java char array …\nCopy the contents of the <code>buf</code> slice to the java double …\nSet a field. Does the same lookups as <code>get_field</code> and …\nSet a field without any type checking.\nCopy the contents of the <code>buf</code> slice to the java float array …\nCopy the contents of the <code>buf</code> slice to the java int array …\nCopy the contents of the <code>buf</code> slice to the java long array …\nSets an element of the <code>jobjectArray</code> array.\nSurrenders ownership of a Rust value to Java.\nCopy the contents of the <code>buf</code> slice to the java short array …\nSet a static field. Requires a class lookup and a field id …\nMethod signature.\nParser for java type signatures.\nString types for going to/from java strings.\n<code>jni-sys</code> re-exports\nTake a Rust field back from Java.\nReturns the current number of threads attached to the JVM.\nRaise an exception from an existing object. This will …\nCreate and throw a new exception from a class descriptor …\nUnbind all native methods of class.\nExecutes a provided closure, making sure that the current …\nExecutes a provided closure, making sure that the current …\nExecutes the given function in a new local reference …\nTrait for things that can be looked up through the JNI via …\nLook up the concrete type from the JVM.\nContains the error value\nContains the success value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAuto-release wrapper for pointer-based generic arrays.\nAuto-delete wrapper for local refs.\nAuto-release wrapper for pointer-based primitive arrays.\nCopy back the content and free the elems buffer. For …\nA global JVM reference. These are “pinned” by the …\nLifetime’d representation of a <code>jobject</code> that is an …\nLifetime’d representation of a <code>jclass</code>. Just a <code>JObject</code> …\nWrapper around <code>jfieldID</code> that implements <code>Send</code> + <code>Sync</code> since …\nWrapper for JObjects that implement <code>java/util/List</code>. …\nAn iterator over the keys and values in a map.\nWrapper for JObjects that implement <code>java/util/Map</code>. …\nAn iterator over the keys and values in a map.\nWrapper around <code>jmethodID</code> that implements <code>Send</code> + <code>Sync</code> since …\nWrapper around <code>sys::jobject</code> that adds a lifetime. This …\nWrapper around <code>jfieldID</code> that implements <code>Send</code> + <code>Sync</code> since …\nWrapper around <code>jmethodID</code> that implements <code>Send</code> + <code>Sync</code> since …\nLifetime’d representation of a <code>jstring</code>. Just a <code>JObject</code> …\nLifetime’d representation of a <code>jthrowable</code>. Just a <code>JObject</code>…\nRusty version of the JNI C <code>jvalue</code> enum. Used in Java …\nFree the buffer without copying back the possible changes.\nReleaseMode\nTrait to define type array access/release\nAppend an element to the list\nGet a reference to the wrapped object\nGet the object from the global ref\nGet a reference to the wrapped pointer\nGet a reference to the wrapped pointer\nTry to unwrap to a byte.\nTry to unwrap to a char.\nCommits the changes to the array, if it is a copy\nTry to unwrap to a double.\nDon’t commit the changes to the array on release (if it …\nDon’t copy the changes to the array on release (if it is …\nTry to unwrap to a float.\nForget the wrapper, returning the original object.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a map from the environment and an object. This …\nCreate a map from the environment and an object. This …\nCreates a <code>JMethodID</code> that wraps the given <code>raw</code> <code>jmethodID</code>\nCreates a <code>JStaticMethodID</code> that wraps the given <code>raw</code> …\nCreates a <code>JFieldID</code> that wraps the given <code>raw</code> <code>jfieldID</code>\nCreates a <code>JStaticFieldID</code> that wraps the given <code>raw</code> <code>jfieldID</code>\nCreates a <code>JObject</code> that wraps the given <code>raw</code> <code>jobject</code>\nCreates a <code>JThrowable</code> that wraps the given <code>raw</code> <code>jthrowable</code>\nCreates a <code>JClass</code> that wraps the given <code>raw</code> <code>jclass</code>\nCreates a <code>JString</code> that wraps the given <code>raw</code> <code>jstring</code>\nCreates a <code>JByteBuffer</code> that wraps the given <code>raw</code> <code>jobject</code>\ngetter\nLook up the value for a key. Returns <code>Some</code> if it’s found …\nLook up the value for a key. Returns <code>Some</code> if it’s found …\nTry to unwrap to an int.\nInsert an element at a specific index\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwrap to the internal jni type.\nUnwrap to the internal jni type.\nUnwrap to the internal jni type.\nUnwrap to the internal jni type.\nUnwrap to the internal jni type.\nUnwrap to the raw jni type.\nUnwrap to the raw jni type.\nUnwrap to the raw jni type.\nUnwrap to the raw jni type.\nIndicates if the array is a copy or not\nIndicates if the array is a copy or not\nGet key/value iterator for the map. This is done by …\nGet key/value iterator for the map. This is done by …\nTry to unwrap to a long.\nTry to unwrap to an Object.\nCreates a new auto-delete wrapper for a local ref.\nCreates a new null object\nPop the last element from the list\nGet the primitive type for the enum variant. If it’s not …\nLook up the value for a key. Returns <code>Some</code> with the old …\nreleaser\nRemove a value from the map. Returns <code>Some</code> with the removed …\nRemove an element from the list by index\nTry to unwrap to a short.\nGet the size of the list\nReturns the array size\nReturns the array size\nConvert the enum to its jni-compatible equivalent.\nGet the type name for the enum variant.\nTry to unwrap to a void.\nTry to unwrap to a boolean.\nEnum representing any java type in addition to method …\nA primitive java type. These are the things that can be …\nEnum representing any java type that may be used as a …\nA method type signature. This is the structure …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse a signature string into a TypeSignature enum.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrapper for <code>std::ffi::CStr</code> that also takes care of …\nWrapper for <code>std::ffi::CString</code> that also takes care of …\nReference to a string in the JVM. Holds a pointer to the …\nGet the borrowed version of the JNIString. Equivalent to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a <code>JavaStr</code> from an object and a reference to the …\nConstruct a reference to a <code>JNIStr</code> from a pointer. …\nExtract the raw C string pointer from the JavaStr. This …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet Java $jni_type array\nGet Java $jni_type array\nGet Java $jni_type array\nGet Java $jni_type array\nGet Java $jni_type array\nGet Java $jni_type array\nGet Java $jni_type array\nGet Java $jni_type array\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRelease Java $jni_type array\nRelease Java $jni_type array\nRelease Java $jni_type array\nRelease Java $jni_type array\nRelease Java $jni_type array\nRelease Java $jni_type array\nRelease Java $jni_type array\nRelease Java $jni_type array")